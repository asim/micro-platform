// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/platform.proto

package go_micro_platform

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Platform service

type PlatformService interface {
	CreateEvent(ctx context.Context, in *CreateEventRequest, opts ...client.CallOption) (*CreateEventResponse, error)
	ListEvents(ctx context.Context, in *ListEventsRequest, opts ...client.CallOption) (*ListEventsResponse, error)
}

type platformService struct {
	c    client.Client
	name string
}

func NewPlatformService(name string, c client.Client) PlatformService {
	return &platformService{
		c:    c,
		name: name,
	}
}

func (c *platformService) CreateEvent(ctx context.Context, in *CreateEventRequest, opts ...client.CallOption) (*CreateEventResponse, error) {
	req := c.c.NewRequest(c.name, "Platform.CreateEvent", in)
	out := new(CreateEventResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *platformService) ListEvents(ctx context.Context, in *ListEventsRequest, opts ...client.CallOption) (*ListEventsResponse, error) {
	req := c.c.NewRequest(c.name, "Platform.ListEvents", in)
	out := new(ListEventsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Platform service

type PlatformHandler interface {
	CreateEvent(context.Context, *CreateEventRequest, *CreateEventResponse) error
	ListEvents(context.Context, *ListEventsRequest, *ListEventsResponse) error
}

func RegisterPlatformHandler(s server.Server, hdlr PlatformHandler, opts ...server.HandlerOption) error {
	type platform interface {
		CreateEvent(ctx context.Context, in *CreateEventRequest, out *CreateEventResponse) error
		ListEvents(ctx context.Context, in *ListEventsRequest, out *ListEventsResponse) error
	}
	type Platform struct {
		platform
	}
	h := &platformHandler{hdlr}
	return s.Handle(s.NewHandler(&Platform{h}, opts...))
}

type platformHandler struct {
	PlatformHandler
}

func (h *platformHandler) CreateEvent(ctx context.Context, in *CreateEventRequest, out *CreateEventResponse) error {
	return h.PlatformHandler.CreateEvent(ctx, in, out)
}

func (h *platformHandler) ListEvents(ctx context.Context, in *ListEventsRequest, out *ListEventsResponse) error {
	return h.PlatformHandler.ListEvents(ctx, in, out)
}
